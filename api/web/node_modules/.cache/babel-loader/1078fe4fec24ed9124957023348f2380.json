{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _class, _temp;\n\nimport Grid, { accessibilityOverscanIndicesGetter } from '../Grid';\nimport * as React from 'react';\nimport clsx from 'clsx';\n/**\n * It is inefficient to create and manage a large list of DOM elements within a scrolling container\n * if only a few of those elements are visible. The primary purpose of this component is to improve\n * performance by only rendering the DOM nodes that a user is able to see based on their current\n * scroll position.\n *\n * This component renders a virtualized list of elements with either fixed or dynamic heights.\n */\n\nvar List = (_temp = _class = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(List, _React$PureComponent);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"Grid\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_cellRenderer\", function (_ref) {\n      var parent = _ref.parent,\n          rowIndex = _ref.rowIndex,\n          style = _ref.style,\n          isScrolling = _ref.isScrolling,\n          isVisible = _ref.isVisible,\n          key = _ref.key;\n      var rowRenderer = _this.props.rowRenderer; // TRICKY The style object is sometimes cached by Grid.\n      // This prevents new style objects from bypassing shallowCompare().\n      // However as of React 16, style props are auto-frozen (at least in dev mode)\n      // Check to make sure we can still modify the style before proceeding.\n      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n\n      var widthDescriptor = Object.getOwnPropertyDescriptor(style, 'width');\n\n      if (widthDescriptor && widthDescriptor.writable) {\n        // By default, List cells should be 100% width.\n        // This prevents them from flowing under a scrollbar (if present).\n        style.width = '100%';\n      }\n\n      return rowRenderer({\n        index: rowIndex,\n        style: style,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setRef\", function (ref) {\n      _this.Grid = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScroll\", function (_ref2) {\n      var clientHeight = _ref2.clientHeight,\n          scrollHeight = _ref2.scrollHeight,\n          scrollTop = _ref2.scrollTop;\n      var onScroll = _this.props.onScroll;\n      onScroll({\n        clientHeight: clientHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onSectionRendered\", function (_ref3) {\n      var rowOverscanStartIndex = _ref3.rowOverscanStartIndex,\n          rowOverscanStopIndex = _ref3.rowOverscanStopIndex,\n          rowStartIndex = _ref3.rowStartIndex,\n          rowStopIndex = _ref3.rowStopIndex;\n      var onRowsRendered = _this.props.onRowsRendered;\n      onRowsRendered({\n        overscanStartIndex: rowOverscanStartIndex,\n        overscanStopIndex: rowOverscanStopIndex,\n        startIndex: rowStartIndex,\n        stopIndex: rowStopIndex\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"forceUpdateGrid\",\n    value: function forceUpdateGrid() {\n      if (this.Grid) {\n        this.Grid.forceUpdate();\n      }\n    }\n    /** See Grid#getOffsetForCell */\n\n  }, {\n    key: \"getOffsetForRow\",\n    value: function getOffsetForRow(_ref4) {\n      var alignment = _ref4.alignment,\n          index = _ref4.index;\n\n      if (this.Grid) {\n        var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({\n          alignment: alignment,\n          rowIndex: index,\n          columnIndex: 0\n        }),\n            scrollTop = _this$Grid$getOffsetF.scrollTop;\n\n        return scrollTop;\n      }\n\n      return 0;\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n\n      if (this.Grid) {\n        this.Grid.invalidateCellSizeAfterRender({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#measureAllCells */\n\n  }, {\n    key: \"measureAllRows\",\n    value: function measureAllRows() {\n      if (this.Grid) {\n        this.Grid.measureAllCells();\n      }\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$columnIndex = _ref6.columnIndex,\n          columnIndex = _ref6$columnIndex === void 0 ? 0 : _ref6$columnIndex,\n          _ref6$rowIndex = _ref6.rowIndex,\n          rowIndex = _ref6$rowIndex === void 0 ? 0 : _ref6$rowIndex;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#recomputeGridSize */\n\n  }, {\n    key: \"recomputeRowHeights\",\n    value: function recomputeRowHeights() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: index,\n          columnIndex: 0\n        });\n      }\n    }\n    /** See Grid#scrollToPosition */\n\n  }, {\n    key: \"scrollToPosition\",\n    value: function scrollToPosition() {\n      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToPosition({\n          scrollTop: scrollTop\n        });\n      }\n    }\n    /** See Grid#scrollToCell */\n\n  }, {\n    key: \"scrollToRow\",\n    value: function scrollToRow() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToCell({\n          columnIndex: 0,\n          rowIndex: index\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          noRowsRenderer = _this$props.noRowsRenderer,\n          scrollToIndex = _this$props.scrollToIndex,\n          width = _this$props.width;\n      var classNames = clsx('ReactVirtualized__List', className);\n      return React.createElement(Grid, _extends({}, this.props, {\n        autoContainerWidth: true,\n        cellRenderer: this._cellRenderer,\n        className: classNames,\n        columnWidth: width,\n        columnCount: 1,\n        noContentRenderer: noRowsRenderer,\n        onScroll: this._onScroll,\n        onSectionRendered: this._onSectionRendered,\n        ref: this._setRef,\n        scrollToRow: scrollToIndex\n      }));\n    }\n  }]);\n\n  return List;\n}(React.PureComponent), _defineProperty(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  \"autoHeight\": PropTypes.bool.isRequired,\n\n  /** Optional CSS class name */\n  \"className\": PropTypes.string,\n\n  /**\n   * Used to estimate the total height of a List before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": PropTypes.number.isRequired,\n\n  /** Height constraint for list (determines how many actual rows are rendered) */\n  \"height\": PropTypes.number.isRequired,\n\n  /** Optional renderer to be used in place of rows when rowCount is 0 */\n  \"noRowsRenderer\": function noRowsRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === \"function\" ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Callback invoked with information about the slice of rows that were just rendered.  */\n  \"onRowsRendered\": PropTypes.func.isRequired,\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": PropTypes.func.isRequired,\n\n  /** See Grid#overscanIndicesGetter */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   */\n  \"overscanRowCount\": PropTypes.number.isRequired,\n\n  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  */\n  \"rowHeight\": function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a row given an index; ({ index: number }): node */\n  \"rowRenderer\": function rowRenderer() {\n    return (typeof bpfrpt_proptype_RowRenderer === \"function\" ? bpfrpt_proptype_RowRenderer.isRequired ? bpfrpt_proptype_RowRenderer.isRequired : bpfrpt_proptype_RowRenderer : PropTypes.shape(bpfrpt_proptype_RowRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in list. */\n  \"rowCount\": PropTypes.number.isRequired,\n\n  /** See Grid#scrollToAlignment */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === \"function\" ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToIndex\": PropTypes.number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": PropTypes.number,\n\n  /** Optional inline style */\n  \"style\": PropTypes.object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": PropTypes.number,\n\n  /** Width of list */\n  \"width\": PropTypes.number.isRequired\n}), _temp);\n\n_defineProperty(List, \"defaultProps\", {\n  autoHeight: false,\n  estimatedRowSize: 30,\n  onScroll: function onScroll() {},\n  noRowsRenderer: function noRowsRenderer() {\n    return null;\n  },\n  onRowsRendered: function onRowsRendered() {},\n  overscanIndicesGetter: accessibilityOverscanIndicesGetter,\n  overscanRowCount: 10,\n  scrollToAlignment: 'auto',\n  scrollToIndex: -1,\n  style: {}\n});\n\nexport { List as default };\nimport { bpfrpt_proptype_NoContentRenderer } from \"../Grid\";\nimport { bpfrpt_proptype_Alignment } from \"../Grid\";\nimport { bpfrpt_proptype_CellSize } from \"../Grid\";\nimport { bpfrpt_proptype_CellPosition } from \"../Grid\";\nimport { bpfrpt_proptype_OverscanIndicesGetter } from \"../Grid\";\nimport { bpfrpt_proptype_RenderedSection } from \"../Grid\";\nimport { bpfrpt_proptype_CellRendererParams } from \"../Grid\";\nimport { bpfrpt_proptype_Scroll as bpfrpt_proptype_GridScroll } from \"../Grid\";\nimport { bpfrpt_proptype_RowRenderer } from \"./types\";\nimport { bpfrpt_proptype_RenderedRows } from \"./types\";\nimport { bpfrpt_proptype_Scroll } from \"./types\";\nimport PropTypes from \"prop-types\";","map":{"version":3,"sources":["/home/ycali/dev/CONSULTORIO/web/node_modules/react-virtualized/dist/es/List/List.js"],"names":["_extends","_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","_defineProperty","_class","_temp","Grid","accessibilityOverscanIndicesGetter","React","clsx","List","_React$PureComponent","_getPrototypeOf2","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_ref","parent","rowIndex","style","isScrolling","isVisible","key","rowRenderer","props","widthDescriptor","Object","getOwnPropertyDescriptor","writable","width","index","ref","_ref2","clientHeight","scrollHeight","scrollTop","onScroll","_ref3","rowOverscanStartIndex","rowOverscanStopIndex","rowStartIndex","rowStopIndex","onRowsRendered","overscanStartIndex","overscanStopIndex","startIndex","stopIndex","value","forceUpdateGrid","forceUpdate","getOffsetForRow","_ref4","alignment","_this$Grid$getOffsetF","getOffsetForCell","columnIndex","invalidateCellSizeAfterRender","_ref5","measureAllRows","measureAllCells","recomputeGridSize","_ref6","undefined","_ref6$columnIndex","_ref6$rowIndex","recomputeRowHeights","scrollToPosition","scrollToRow","scrollToCell","render","_this$props","className","noRowsRenderer","scrollToIndex","classNames","createElement","autoContainerWidth","cellRenderer","_cellRenderer","columnWidth","columnCount","noContentRenderer","_onScroll","onSectionRendered","_onSectionRendered","_setRef","PureComponent","process","env","NODE_ENV","PropTypes","string","bool","isRequired","number","bpfrpt_proptype_NoContentRenderer","shape","func","overscanIndicesGetter","bpfrpt_proptype_OverscanIndicesGetter","rowHeight","bpfrpt_proptype_CellSize","bpfrpt_proptype_RowRenderer","scrollToAlignment","bpfrpt_proptype_Alignment","object","autoHeight","estimatedRowSize","overscanRowCount","default","bpfrpt_proptype_CellPosition","bpfrpt_proptype_RenderedSection","bpfrpt_proptype_CellRendererParams","bpfrpt_proptype_Scroll","bpfrpt_proptype_GridScroll","bpfrpt_proptype_RenderedRows"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _class, _temp;\n\nimport Grid, { accessibilityOverscanIndicesGetter } from '../Grid';\nimport * as React from 'react';\nimport clsx from 'clsx';\n/**\n * It is inefficient to create and manage a large list of DOM elements within a scrolling container\n * if only a few of those elements are visible. The primary purpose of this component is to improve\n * performance by only rendering the DOM nodes that a user is able to see based on their current\n * scroll position.\n *\n * This component renders a virtualized list of elements with either fixed or dynamic heights.\n */\n\nvar List = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(List, _React$PureComponent);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"Grid\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_cellRenderer\", function (_ref) {\n      var parent = _ref.parent,\n          rowIndex = _ref.rowIndex,\n          style = _ref.style,\n          isScrolling = _ref.isScrolling,\n          isVisible = _ref.isVisible,\n          key = _ref.key;\n      var rowRenderer = _this.props.rowRenderer; // TRICKY The style object is sometimes cached by Grid.\n      // This prevents new style objects from bypassing shallowCompare().\n      // However as of React 16, style props are auto-frozen (at least in dev mode)\n      // Check to make sure we can still modify the style before proceeding.\n      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n\n      var widthDescriptor = Object.getOwnPropertyDescriptor(style, 'width');\n\n      if (widthDescriptor && widthDescriptor.writable) {\n        // By default, List cells should be 100% width.\n        // This prevents them from flowing under a scrollbar (if present).\n        style.width = '100%';\n      }\n\n      return rowRenderer({\n        index: rowIndex,\n        style: style,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_setRef\", function (ref) {\n      _this.Grid = ref;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onScroll\", function (_ref2) {\n      var clientHeight = _ref2.clientHeight,\n          scrollHeight = _ref2.scrollHeight,\n          scrollTop = _ref2.scrollTop;\n      var onScroll = _this.props.onScroll;\n      onScroll({\n        clientHeight: clientHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_onSectionRendered\", function (_ref3) {\n      var rowOverscanStartIndex = _ref3.rowOverscanStartIndex,\n          rowOverscanStopIndex = _ref3.rowOverscanStopIndex,\n          rowStartIndex = _ref3.rowStartIndex,\n          rowStopIndex = _ref3.rowStopIndex;\n      var onRowsRendered = _this.props.onRowsRendered;\n      onRowsRendered({\n        overscanStartIndex: rowOverscanStartIndex,\n        overscanStopIndex: rowOverscanStopIndex,\n        startIndex: rowStartIndex,\n        stopIndex: rowStopIndex\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"forceUpdateGrid\",\n    value: function forceUpdateGrid() {\n      if (this.Grid) {\n        this.Grid.forceUpdate();\n      }\n    }\n    /** See Grid#getOffsetForCell */\n\n  }, {\n    key: \"getOffsetForRow\",\n    value: function getOffsetForRow(_ref4) {\n      var alignment = _ref4.alignment,\n          index = _ref4.index;\n\n      if (this.Grid) {\n        var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({\n          alignment: alignment,\n          rowIndex: index,\n          columnIndex: 0\n        }),\n            scrollTop = _this$Grid$getOffsetF.scrollTop;\n\n        return scrollTop;\n      }\n\n      return 0;\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n\n      if (this.Grid) {\n        this.Grid.invalidateCellSizeAfterRender({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#measureAllCells */\n\n  }, {\n    key: \"measureAllRows\",\n    value: function measureAllRows() {\n      if (this.Grid) {\n        this.Grid.measureAllCells();\n      }\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$columnIndex = _ref6.columnIndex,\n          columnIndex = _ref6$columnIndex === void 0 ? 0 : _ref6$columnIndex,\n          _ref6$rowIndex = _ref6.rowIndex,\n          rowIndex = _ref6$rowIndex === void 0 ? 0 : _ref6$rowIndex;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#recomputeGridSize */\n\n  }, {\n    key: \"recomputeRowHeights\",\n    value: function recomputeRowHeights() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: index,\n          columnIndex: 0\n        });\n      }\n    }\n    /** See Grid#scrollToPosition */\n\n  }, {\n    key: \"scrollToPosition\",\n    value: function scrollToPosition() {\n      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToPosition({\n          scrollTop: scrollTop\n        });\n      }\n    }\n    /** See Grid#scrollToCell */\n\n  }, {\n    key: \"scrollToRow\",\n    value: function scrollToRow() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToCell({\n          columnIndex: 0,\n          rowIndex: index\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          noRowsRenderer = _this$props.noRowsRenderer,\n          scrollToIndex = _this$props.scrollToIndex,\n          width = _this$props.width;\n      var classNames = clsx('ReactVirtualized__List', className);\n      return React.createElement(Grid, _extends({}, this.props, {\n        autoContainerWidth: true,\n        cellRenderer: this._cellRenderer,\n        className: classNames,\n        columnWidth: width,\n        columnCount: 1,\n        noContentRenderer: noRowsRenderer,\n        onScroll: this._onScroll,\n        onSectionRendered: this._onSectionRendered,\n        ref: this._setRef,\n        scrollToRow: scrollToIndex\n      }));\n    }\n  }]);\n\n  return List;\n}(React.PureComponent), _defineProperty(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  \"autoHeight\": PropTypes.bool.isRequired,\n\n  /** Optional CSS class name */\n  \"className\": PropTypes.string,\n\n  /**\n   * Used to estimate the total height of a List before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": PropTypes.number.isRequired,\n\n  /** Height constraint for list (determines how many actual rows are rendered) */\n  \"height\": PropTypes.number.isRequired,\n\n  /** Optional renderer to be used in place of rows when rowCount is 0 */\n  \"noRowsRenderer\": function noRowsRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === \"function\" ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Callback invoked with information about the slice of rows that were just rendered.  */\n  \"onRowsRendered\": PropTypes.func.isRequired,\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": PropTypes.func.isRequired,\n\n  /** See Grid#overscanIndicesGetter */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   */\n  \"overscanRowCount\": PropTypes.number.isRequired,\n\n  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  */\n  \"rowHeight\": function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === \"function\" ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a row given an index; ({ index: number }): node */\n  \"rowRenderer\": function rowRenderer() {\n    return (typeof bpfrpt_proptype_RowRenderer === \"function\" ? bpfrpt_proptype_RowRenderer.isRequired ? bpfrpt_proptype_RowRenderer.isRequired : bpfrpt_proptype_RowRenderer : PropTypes.shape(bpfrpt_proptype_RowRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in list. */\n  \"rowCount\": PropTypes.number.isRequired,\n\n  /** See Grid#scrollToAlignment */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === \"function\" ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToIndex\": PropTypes.number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": PropTypes.number,\n\n  /** Optional inline style */\n  \"style\": PropTypes.object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": PropTypes.number,\n\n  /** Width of list */\n  \"width\": PropTypes.number.isRequired\n}), _temp);\n\n_defineProperty(List, \"defaultProps\", {\n  autoHeight: false,\n  estimatedRowSize: 30,\n  onScroll: function onScroll() {},\n  noRowsRenderer: function noRowsRenderer() {\n    return null;\n  },\n  onRowsRendered: function onRowsRendered() {},\n  overscanIndicesGetter: accessibilityOverscanIndicesGetter,\n  overscanRowCount: 10,\n  scrollToAlignment: 'auto',\n  scrollToIndex: -1,\n  style: {}\n});\n\nexport { List as default };\nimport { bpfrpt_proptype_NoContentRenderer } from \"../Grid\";\nimport { bpfrpt_proptype_Alignment } from \"../Grid\";\nimport { bpfrpt_proptype_CellSize } from \"../Grid\";\nimport { bpfrpt_proptype_CellPosition } from \"../Grid\";\nimport { bpfrpt_proptype_OverscanIndicesGetter } from \"../Grid\";\nimport { bpfrpt_proptype_RenderedSection } from \"../Grid\";\nimport { bpfrpt_proptype_CellRendererParams } from \"../Grid\";\nimport { bpfrpt_proptype_Scroll as bpfrpt_proptype_GridScroll } from \"../Grid\";\nimport { bpfrpt_proptype_RowRenderer } from \"./types\";\nimport { bpfrpt_proptype_RenderedRows } from \"./types\";\nimport { bpfrpt_proptype_Scroll } from \"./types\";\nimport PropTypes from \"prop-types\";"]},"metadata":{},"sourceType":"module"}