package com.odontolink.rest;

import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.odontolink.dao.PacienteDao;
import com.odontolink.model.Paciente;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("pacientes")
public class PacienteRest {
	@Autowired
	private PacienteDao pacienteDao;

	@PostMapping("alta")
	public ResponseEntity<Paciente> alta(@RequestBody Paciente Paciente) {
		pacienteDao.save(Paciente);
		return ResponseEntity.ok(Paciente);
	}

	@GetMapping("listar")
	public List<Paciente> listar() {
		return pacienteDao.findAll();

	}

	@DeleteMapping("eliminar/{id}")
	public ResponseEntity<Integer> eliminarPaciente(@PathVariable("id") Integer id) {
		pacienteDao.deleteById(id);
		return ResponseEntity.ok(id);
	}

	@PutMapping("actualizar")
	public void actualizarPaciente(@RequestBody Paciente paciente) {
		pacienteDao.save(paciente);
	}

	@DeleteMapping("deleteAll")
	public void eliminarPaciente() {
		pacienteDao.deleteAll();
	}
	
	
	public static Instant calcularTurnos() {
		LocalDate ld = LocalDate.of(2021, Month.NOVEMBER, 12);
		LocalTime lt = LocalTime.of(15, 0); // 3 PM in 24-hour time.
		LocalDateTime ldt = LocalDateTime.of(ld, lt);

		ZoneId zone = ZoneId.of("America/Argentina/Buenos_Aires");
		ZonedDateTime zonedDateTime = ldt.atZone(zone);
		Instant instant = zonedDateTime.toInstant();
		Duration d = Duration.ofMinutes(20);
		Instant start = ldt.atZone(zone).toInstant();
		Instant stop = start.plus(d);
		return stop;
	}
}
