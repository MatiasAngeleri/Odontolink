{"ast":null,"code":"var _jsxFileName = \"/home/ycali/dev/CONSULTORIO/web/src/app/pages/_components/MedicosTabla.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@mui/styles';\nimport { createTheme } from '@mui/material/styles';\nimport TableCell from '@mui/material/TableCell';\nimport Paper from '@mui/material/Paper';\nimport { AutoSizer, Column, Table } from 'react-virtualized';\nimport { DEFAULT_ENCODING } from 'crypto';\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useHistory } from 'react-router';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MedicosTabla = () => {\n  _s();\n\n  let history = useHistory();\n  const [loading, setLoading] = React.useState(false);\n  const [loadedRows, setLoadedRows] = React.useState([]);\n  const mounted = React.useRef(true);\n  const MAX_ROW_LENGTH = 500;\n\n  async function sleep(duration) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, duration);\n    });\n  }\n\n  function CustomLoadingOverlay() {\n    return /*#__PURE__*/_jsxDEV(GridOverlay, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: 0,\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this);\n  }\n\n  const {\n    data\n  } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 20,\n    maxColumns: 6\n  });\n\n  const loadServerRows = async newRowLength => {\n    setLoading(true);\n    const newData = await getRealData(newRowLength, getCommodityColumns()); // Simulate network throttle\n\n    await sleep(Math.random() * 500 + 100);\n\n    if (mounted.current) {\n      setLoading(false);\n      setLoadedRows(loadedRows.concat(newData.rows));\n    }\n  };\n\n  const handleOnRowsScrollEnd = params => {\n    if (loadedRows.length <= MAX_ROW_LENGTH) {\n      loadServerRows(params.viewportPageSize);\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  const rows = [{\n    id: 1,\n    lastName: 'Mendez',\n    firstName: 'Sara',\n    email: 'sara987@gmail.com',\n    dni: 'DNI 20980272',\n    matricula: '981626',\n    estado: 'Activo',\n    actions: ''\n  }, {\n    id: 2,\n    lastName: 'Mariana',\n    firstName: 'Lopez',\n    email: 'loperbs@gmail.com',\n    dni: 'DNI 28980656',\n    matricula: '129800',\n    estado: 'Activo',\n    actions: ''\n  }, {\n    id: 3,\n    lastName: 'Fernando',\n    firstName: 'Jaime',\n    email: 'jaimeodon@gmail.com',\n    dni: 'DNI 32772090',\n    matricula: '323226',\n    estado: 'Activo',\n    actions: ''\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGridPro, { ...data,\n      rows: data.rows.concat(rows),\n      loading: loading,\n      hideFooterPagination: true,\n      onRowsScrollEnd: handleOnRowsScrollEnd,\n      components: {\n        LoadingOverlay: CustomLoadingOverlay\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MedicosTabla, \"NTJ8GIKMP404TZ1EFN30930XU90=\", true, function () {\n  return [useHistory];\n});\n\n_c = MedicosTabla;\nexport default MedicosTabla;\n\nvar _c;\n\n$RefreshReg$(_c, \"MedicosTabla\");","map":{"version":3,"sources":["/home/ycali/dev/CONSULTORIO/web/src/app/pages/_components/MedicosTabla.js"],"names":["React","useEffect","PropTypes","clsx","withStyles","createTheme","TableCell","Paper","AutoSizer","Column","Table","DEFAULT_ENCODING","ModeEditIcon","DeleteIcon","DataGrid","useHistory","IconButton","Tooltip","MedicosTabla","history","loading","setLoading","useState","loadedRows","setLoadedRows","mounted","useRef","MAX_ROW_LENGTH","sleep","duration","Promise","resolve","setTimeout","CustomLoadingOverlay","position","top","width","data","useDemoData","dataSet","rowLength","maxColumns","loadServerRows","newRowLength","newData","getRealData","getCommodityColumns","Math","random","current","concat","rows","handleOnRowsScrollEnd","params","length","viewportPageSize","id","lastName","firstName","email","dni","matricula","estado","actions","height","LoadingOverlay"],"mappings":"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","sourcesContent":["import React , {useEffect}from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@mui/styles';\nimport { createTheme } from '@mui/material/styles';\nimport TableCell from '@mui/material/TableCell';\nimport Paper from '@mui/material/Paper';\nimport { AutoSizer, Column, Table } from 'react-virtualized';\nimport { DEFAULT_ENCODING } from 'crypto';\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\nimport DeleteIcon from '@mui/icons-material/Delete';  \nimport { DataGrid } from '@mui/x-data-grid';\nimport { useHistory } from 'react-router';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\n\n\nconst MedicosTabla = () => {\n  let history = useHistory();\n  const [loading, setLoading] = React.useState(false);\n  const [loadedRows, setLoadedRows] = React.useState([]);\n  const mounted = React.useRef(true);\n\n\nconst MAX_ROW_LENGTH = 500;\n\nasync function sleep(duration) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n\nfunction CustomLoadingOverlay() {\n  return (\n    <GridOverlay>\n      <div style={{ position: 'absolute', top: 0, width: '100%' }}>\n        <LinearProgress />\n      </div>\n    </GridOverlay>\n  );\n}\n\n\n  const { data } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 20,\n    maxColumns: 6,\n  });\n\n  const loadServerRows = async (newRowLength) => {\n    setLoading(true);\n    const newData = await getRealData(newRowLength, getCommodityColumns());\n    // Simulate network throttle\n    await sleep(Math.random() * 500 + 100);\n\n    if (mounted.current) {\n      setLoading(false);\n      setLoadedRows(loadedRows.concat(newData.rows));\n    }\n  };\n\n  const handleOnRowsScrollEnd = (params) => {\n    if (loadedRows.length <= MAX_ROW_LENGTH) {\n      loadServerRows(params.viewportPageSize);\n    }\n  };\n  useEffect(() => {\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n \n\n \nconst rows = [\n  { id: 1, lastName: 'Mendez', firstName: 'Sara', email: 'sara987@gmail.com'  , dni : 'DNI 20980272' , matricula : '981626' , estado : 'Activo' , actions: ''},\n  { id: 2, lastName: 'Mariana', firstName: 'Lopez',email: 'loperbs@gmail.com' , dni : 'DNI 28980656'  , matricula : '129800' , estado : 'Activo'  ,  actions: ''},\n  { id: 3, lastName: 'Fernando', firstName: 'Jaime', email:'jaimeodon@gmail.com'  ,  dni : 'DNI 32772090'  ,matricula : '323226'  , estado : 'Activo',  actions: ''} \n];\n\n\n  return (\n    \n    <div style={{ height: 400, width: '100%' }}>\n    <DataGridPro\n      {...data}\n      rows={data.rows.concat(rows)}\n      loading={loading}\n      hideFooterPagination\n      onRowsScrollEnd={handleOnRowsScrollEnd}\n      components={{\n        LoadingOverlay: CustomLoadingOverlay,\n      }}\n    />\n  </div>\n  );\n}\nexport default MedicosTabla;"]},"metadata":{},"sourceType":"module"}