{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\n\nvar ScalingCellSizeAndPositionManager = /*#__PURE__*/function () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === void 0 ? getMaxElementSize() : _ref$maxScrollSize,\n        params = _objectWithoutProperties(_ref, [\"maxScrollSize\"]);\n\n    _classCallCheck(this, ScalingCellSizeAndPositionManager);\n\n    _defineProperty(this, \"_cellSizeAndPositionManager\", void 0);\n\n    _defineProperty(this, \"_maxScrollSize\", void 0); // Favor composition over inheritance to simplify IE10 support\n\n\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  _createClass(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexport { ScalingCellSizeAndPositionManager as default };\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"../types\";\nimport { bpfrpt_proptype_VisibleCellRange } from \"../types\";","map":{"version":3,"sources":["/home/ycali/dev/CONSULTORIO/web/node_modules/react-virtualized/dist/es/Grid/utils/ScalingCellSizeAndPositionManager.js"],"names":["_objectWithoutProperties","_classCallCheck","_createClass","_defineProperty","CellSizeAndPositionManager","getMaxElementSize","ScalingCellSizeAndPositionManager","_ref","_ref$maxScrollSize","maxScrollSize","params","_cellSizeAndPositionManager","_maxScrollSize","key","value","areOffsetsAdjusted","getTotalSize","configure","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","getOffsetAdjustment","_ref2","containerSize","offset","totalSize","safeTotalSize","offsetPercentage","_getOffsetPercentage","Math","round","getSizeAndPositionOfCell","index","getSizeAndPositionOfLastMeasuredCell","min","getUpdatedOffsetForIndex","_ref3","_ref3$align","align","currentOffset","targetIndex","_safeOffsetToOffset","_offsetToSafeOffset","getVisibleCellRange","_ref4","resetCell","_ref5","_ref6","_ref7","default","bpfrpt_proptype_Alignment","bpfrpt_proptype_CellSizeGetter","bpfrpt_proptype_VisibleCellRange"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,gDAArC;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,OAAOC,0BAAP,MAAuC,8BAAvC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA;AACA;AACA;;AACA,IAAIC,iCAAiC,GACrC,aACA,YAAY;AACV,WAASA,iCAAT,CAA2CC,IAA3C,EAAiD;AAC/C,QAAIC,kBAAkB,GAAGD,IAAI,CAACE,aAA9B;AAAA,QACIA,aAAa,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgCH,iBAAiB,EAAjD,GAAsDG,kBAD1E;AAAA,QAEIE,MAAM,GAAGV,wBAAwB,CAACO,IAAD,EAAO,CAAC,eAAD,CAAP,CAFrC;;AAIAN,IAAAA,eAAe,CAAC,IAAD,EAAOK,iCAAP,CAAf;;AAEAH,IAAAA,eAAe,CAAC,IAAD,EAAO,6BAAP,EAAsC,KAAK,CAA3C,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,gBAAP,EAAyB,KAAK,CAA9B,CAAf,CAT+C,CAW/C;;;AACA,SAAKQ,2BAAL,GAAmC,IAAIP,0BAAJ,CAA+BM,MAA/B,CAAnC;AACA,SAAKE,cAAL,GAAsBH,aAAtB;AACD;;AAEDP,EAAAA,YAAY,CAACI,iCAAD,EAAoC,CAAC;AAC/CO,IAAAA,GAAG,EAAE,oBAD0C;AAE/CC,IAAAA,KAAK,EAAE,SAASC,kBAAT,GAA8B;AACnC,aAAO,KAAKJ,2BAAL,CAAiCK,YAAjC,KAAkD,KAAKJ,cAA9D;AACD;AAJ8C,GAAD,EAK7C;AACDC,IAAAA,GAAG,EAAE,WADJ;AAEDC,IAAAA,KAAK,EAAE,SAASG,SAAT,CAAmBP,MAAnB,EAA2B;AAChC,WAAKC,2BAAL,CAAiCM,SAAjC,CAA2CP,MAA3C;AACD;AAJA,GAL6C,EAU7C;AACDG,IAAAA,GAAG,EAAE,cADJ;AAEDC,IAAAA,KAAK,EAAE,SAASI,YAAT,GAAwB;AAC7B,aAAO,KAAKP,2BAAL,CAAiCO,YAAjC,EAAP;AACD;AAJA,GAV6C,EAe7C;AACDL,IAAAA,GAAG,EAAE,sBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASK,oBAAT,GAAgC;AACrC,aAAO,KAAKR,2BAAL,CAAiCQ,oBAAjC,EAAP;AACD;AAJA,GAf6C,EAoB7C;AACDN,IAAAA,GAAG,EAAE,sBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASM,oBAAT,GAAgC;AACrC,aAAO,KAAKT,2BAAL,CAAiCS,oBAAjC,EAAP;AACD;AACD;AACJ;AACA;AACA;;AARK,GApB6C,EA8B7C;AACDP,IAAAA,GAAG,EAAE,qBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASO,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,UAAIC,aAAa,GAAGD,KAAK,CAACC,aAA1B;AAAA,UACIC,MAAM,GAAGF,KAAK,CAACE,MADnB;;AAGA,UAAIC,SAAS,GAAG,KAAKd,2BAAL,CAAiCK,YAAjC,EAAhB;;AAEA,UAAIU,aAAa,GAAG,KAAKV,YAAL,EAApB;;AAEA,UAAIW,gBAAgB,GAAG,KAAKC,oBAAL,CAA0B;AAC/CL,QAAAA,aAAa,EAAEA,aADgC;AAE/CC,QAAAA,MAAM,EAAEA,MAFuC;AAG/CC,QAAAA,SAAS,EAAEC;AAHoC,OAA1B,CAAvB;;AAMA,aAAOG,IAAI,CAACC,KAAL,CAAWH,gBAAgB,IAAID,aAAa,GAAGD,SAApB,CAA3B,CAAP;AACD;AAjBA,GA9B6C,EAgD7C;AACDZ,IAAAA,GAAG,EAAE,0BADJ;AAEDC,IAAAA,KAAK,EAAE,SAASiB,wBAAT,CAAkCC,KAAlC,EAAyC;AAC9C,aAAO,KAAKrB,2BAAL,CAAiCoB,wBAAjC,CAA0DC,KAA1D,CAAP;AACD;AAJA,GAhD6C,EAqD7C;AACDnB,IAAAA,GAAG,EAAE,sCADJ;AAEDC,IAAAA,KAAK,EAAE,SAASmB,oCAAT,GAAgD;AACrD,aAAO,KAAKtB,2BAAL,CAAiCsB,oCAAjC,EAAP;AACD;AACD;;AALC,GArD6C,EA4D7C;AACDpB,IAAAA,GAAG,EAAE,cADJ;AAEDC,IAAAA,KAAK,EAAE,SAASE,YAAT,GAAwB;AAC7B,aAAOa,IAAI,CAACK,GAAL,CAAS,KAAKtB,cAAd,EAA8B,KAAKD,2BAAL,CAAiCK,YAAjC,EAA9B,CAAP;AACD;AACD;;AALC,GA5D6C,EAmE7C;AACDH,IAAAA,GAAG,EAAE,0BADJ;AAEDC,IAAAA,KAAK,EAAE,SAASqB,wBAAT,CAAkCC,KAAlC,EAAyC;AAC9C,UAAIC,WAAW,GAAGD,KAAK,CAACE,KAAxB;AAAA,UACIA,KAAK,GAAGD,WAAW,KAAK,KAAK,CAArB,GAAyB,MAAzB,GAAkCA,WAD9C;AAAA,UAEId,aAAa,GAAGa,KAAK,CAACb,aAF1B;AAAA,UAGIgB,aAAa,GAAGH,KAAK,CAACG,aAH1B;AAAA,UAIIC,WAAW,GAAGJ,KAAK,CAACI,WAJxB;AAKAD,MAAAA,aAAa,GAAG,KAAKE,mBAAL,CAAyB;AACvClB,QAAAA,aAAa,EAAEA,aADwB;AAEvCC,QAAAA,MAAM,EAAEe;AAF+B,OAAzB,CAAhB;;AAKA,UAAIf,MAAM,GAAG,KAAKb,2BAAL,CAAiCwB,wBAAjC,CAA0D;AACrEG,QAAAA,KAAK,EAAEA,KAD8D;AAErEf,QAAAA,aAAa,EAAEA,aAFsD;AAGrEgB,QAAAA,aAAa,EAAEA,aAHsD;AAIrEC,QAAAA,WAAW,EAAEA;AAJwD,OAA1D,CAAb;;AAOA,aAAO,KAAKE,mBAAL,CAAyB;AAC9BnB,QAAAA,aAAa,EAAEA,aADe;AAE9BC,QAAAA,MAAM,EAAEA;AAFsB,OAAzB,CAAP;AAID;AACD;;AAzBC,GAnE6C,EA8F7C;AACDX,IAAAA,GAAG,EAAE,qBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS6B,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,UAAIrB,aAAa,GAAGqB,KAAK,CAACrB,aAA1B;AAAA,UACIC,MAAM,GAAGoB,KAAK,CAACpB,MADnB;AAEAA,MAAAA,MAAM,GAAG,KAAKiB,mBAAL,CAAyB;AAChClB,QAAAA,aAAa,EAAEA,aADiB;AAEhCC,QAAAA,MAAM,EAAEA;AAFwB,OAAzB,CAAT;AAIA,aAAO,KAAKb,2BAAL,CAAiCgC,mBAAjC,CAAqD;AAC1DpB,QAAAA,aAAa,EAAEA,aAD2C;AAE1DC,QAAAA,MAAM,EAAEA;AAFkD,OAArD,CAAP;AAID;AAbA,GA9F6C,EA4G7C;AACDX,IAAAA,GAAG,EAAE,WADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS+B,SAAT,CAAmBb,KAAnB,EAA0B;AAC/B,WAAKrB,2BAAL,CAAiCkC,SAAjC,CAA2Cb,KAA3C;AACD;AAJA,GA5G6C,EAiH7C;AACDnB,IAAAA,GAAG,EAAE,sBADJ;AAEDC,IAAAA,KAAK,EAAE,SAASc,oBAAT,CAA8BkB,KAA9B,EAAqC;AAC1C,UAAIvB,aAAa,GAAGuB,KAAK,CAACvB,aAA1B;AAAA,UACIC,MAAM,GAAGsB,KAAK,CAACtB,MADnB;AAAA,UAEIC,SAAS,GAAGqB,KAAK,CAACrB,SAFtB;AAGA,aAAOA,SAAS,IAAIF,aAAb,GAA6B,CAA7B,GAAiCC,MAAM,IAAIC,SAAS,GAAGF,aAAhB,CAA9C;AACD;AAPA,GAjH6C,EAyH7C;AACDV,IAAAA,GAAG,EAAE,qBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS4B,mBAAT,CAA6BK,KAA7B,EAAoC;AACzC,UAAIxB,aAAa,GAAGwB,KAAK,CAACxB,aAA1B;AAAA,UACIC,MAAM,GAAGuB,KAAK,CAACvB,MADnB;;AAGA,UAAIC,SAAS,GAAG,KAAKd,2BAAL,CAAiCK,YAAjC,EAAhB;;AAEA,UAAIU,aAAa,GAAG,KAAKV,YAAL,EAApB;;AAEA,UAAIS,SAAS,KAAKC,aAAlB,EAAiC;AAC/B,eAAOF,MAAP;AACD,OAFD,MAEO;AACL,YAAIG,gBAAgB,GAAG,KAAKC,oBAAL,CAA0B;AAC/CL,UAAAA,aAAa,EAAEA,aADgC;AAE/CC,UAAAA,MAAM,EAAEA,MAFuC;AAG/CC,UAAAA,SAAS,EAAEA;AAHoC,SAA1B,CAAvB;;AAMA,eAAOI,IAAI,CAACC,KAAL,CAAWH,gBAAgB,IAAID,aAAa,GAAGH,aAApB,CAA3B,CAAP;AACD;AACF;AArBA,GAzH6C,EA+I7C;AACDV,IAAAA,GAAG,EAAE,qBADJ;AAEDC,IAAAA,KAAK,EAAE,SAAS2B,mBAAT,CAA6BO,KAA7B,EAAoC;AACzC,UAAIzB,aAAa,GAAGyB,KAAK,CAACzB,aAA1B;AAAA,UACIC,MAAM,GAAGwB,KAAK,CAACxB,MADnB;;AAGA,UAAIC,SAAS,GAAG,KAAKd,2BAAL,CAAiCK,YAAjC,EAAhB;;AAEA,UAAIU,aAAa,GAAG,KAAKV,YAAL,EAApB;;AAEA,UAAIS,SAAS,KAAKC,aAAlB,EAAiC;AAC/B,eAAOF,MAAP;AACD,OAFD,MAEO;AACL,YAAIG,gBAAgB,GAAG,KAAKC,oBAAL,CAA0B;AAC/CL,UAAAA,aAAa,EAAEA,aADgC;AAE/CC,UAAAA,MAAM,EAAEA,MAFuC;AAG/CC,UAAAA,SAAS,EAAEC;AAHoC,SAA1B,CAAvB;;AAMA,eAAOG,IAAI,CAACC,KAAL,CAAWH,gBAAgB,IAAIF,SAAS,GAAGF,aAAhB,CAA3B,CAAP;AACD;AACF;AArBA,GA/I6C,CAApC,CAAZ;;AAuKA,SAAOjB,iCAAP;AACD,CAzLD,EAFA;;AA6LA,SAASA,iCAAiC,IAAI2C,OAA9C;AACA,SAASC,yBAAT,QAA0C,UAA1C;AACA,SAASC,8BAAT,QAA+C,UAA/C;AACA,SAASC,gCAAT,QAAiD,UAAjD","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nvar ScalingCellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === void 0 ? getMaxElementSize() : _ref$maxScrollSize,\n        params = _objectWithoutProperties(_ref, [\"maxScrollSize\"]);\n\n    _classCallCheck(this, ScalingCellSizeAndPositionManager);\n\n    _defineProperty(this, \"_cellSizeAndPositionManager\", void 0);\n\n    _defineProperty(this, \"_maxScrollSize\", void 0);\n\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  _createClass(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexport { ScalingCellSizeAndPositionManager as default };\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSizeGetter } from \"../types\";\nimport { bpfrpt_proptype_VisibleCellRange } from \"../types\";"]},"metadata":{},"sourceType":"module"}