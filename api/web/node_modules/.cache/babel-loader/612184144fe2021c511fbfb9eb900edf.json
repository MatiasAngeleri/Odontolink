{"ast":null,"code":"import { caf, raf } from './animationFrame';\nvar bpfrpt_proptype_AnimationTimeoutId = process.env.NODE_ENV === 'production' ? null : {\n  \"id\": PropTypes.number.isRequired\n};\nexport var cancelAnimationTimeout = function cancelAnimationTimeout(frame) {\n  return caf(frame.id);\n};\n/**\n * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.\n * When the delay time has been reached the function you're timing out will be called.\n *\n * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)\n */\n\nexport var requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {\n  var start; // wait for end of processing current event handler, because event handler may be long\n\n  Promise.resolve().then(function () {\n    start = Date.now();\n  });\n\n  var timeout = function timeout() {\n    if (Date.now() - start >= delay) {\n      callback.call();\n    } else {\n      frame.id = raf(timeout);\n    }\n  };\n\n  var frame = {\n    id: raf(timeout)\n  };\n  return frame;\n};\nimport PropTypes from \"prop-types\";\nexport { bpfrpt_proptype_AnimationTimeoutId };","map":{"version":3,"sources":["/home/ycali/dev/CONSULTORIO/web/node_modules/react-virtualized/dist/es/utils/requestAnimationTimeout.js"],"names":["caf","raf","bpfrpt_proptype_AnimationTimeoutId","process","env","NODE_ENV","PropTypes","number","isRequired","cancelAnimationTimeout","frame","id","requestAnimationTimeout","callback","delay","start","Promise","resolve","then","Date","now","timeout","call"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,QAAyB,kBAAzB;AACA,IAAIC,kCAAkC,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,IAAxC,GAA+C;AACtF,QAAMC,SAAS,CAACC,MAAV,CAAiBC;AAD+D,CAAxF;AAGA,OAAO,IAAIC,sBAAsB,GAAG,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AACzE,SAAOV,GAAG,CAACU,KAAK,CAACC,EAAP,CAAV;AACD,CAFM;AAGP;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,uBAAuB,GAAG,SAASA,uBAAT,CAAiCC,QAAjC,EAA2CC,KAA3C,EAAkD;AACrF,MAAIC,KAAJ,CADqF,CAC1E;;AAEXC,EAAAA,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAY;AACjCH,IAAAA,KAAK,GAAGI,IAAI,CAACC,GAAL,EAAR;AACD,GAFD;;AAIA,MAAIC,OAAO,GAAG,SAASA,OAAT,GAAmB;AAC/B,QAAIF,IAAI,CAACC,GAAL,KAAaL,KAAb,IAAsBD,KAA1B,EAAiC;AAC/BD,MAAAA,QAAQ,CAACS,IAAT;AACD,KAFD,MAEO;AACLZ,MAAAA,KAAK,CAACC,EAAN,GAAWV,GAAG,CAACoB,OAAD,CAAd;AACD;AACF,GAND;;AAQA,MAAIX,KAAK,GAAG;AACVC,IAAAA,EAAE,EAAEV,GAAG,CAACoB,OAAD;AADG,GAAZ;AAGA,SAAOX,KAAP;AACD,CAnBM;AAoBP,OAAOJ,SAAP,MAAsB,YAAtB;AACA,SAASJ,kCAAT","sourcesContent":["import { caf, raf } from './animationFrame';\nvar bpfrpt_proptype_AnimationTimeoutId = process.env.NODE_ENV === 'production' ? null : {\n  \"id\": PropTypes.number.isRequired\n};\nexport var cancelAnimationTimeout = function cancelAnimationTimeout(frame) {\n  return caf(frame.id);\n};\n/**\n * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.\n * When the delay time has been reached the function you're timing out will be called.\n *\n * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)\n */\n\nexport var requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {\n  var start; // wait for end of processing current event handler, because event handler may be long\n\n  Promise.resolve().then(function () {\n    start = Date.now();\n  });\n\n  var timeout = function timeout() {\n    if (Date.now() - start >= delay) {\n      callback.call();\n    } else {\n      frame.id = raf(timeout);\n    }\n  };\n\n  var frame = {\n    id: raf(timeout)\n  };\n  return frame;\n};\nimport PropTypes from \"prop-types\";\nexport { bpfrpt_proptype_AnimationTimeoutId };"]},"metadata":{},"sourceType":"module"}