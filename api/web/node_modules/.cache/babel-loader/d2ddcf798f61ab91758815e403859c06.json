{"ast":null,"code":"export const CONSULTORIO = \"consultorio/CONSULTORIO\";\nexport const types = {\n  CONSULTORIO_REQUEST: `${CONSULTORIO}_REQUEST`,\n  CONSULTORIO_SUCCESS: `${CONSULTORIO}_SUCCESS`,\n  CONSULTORIO_ERROR: `${CONSULTORIO}_ERROR`,\n  CONSULTORIO_ALTA_MEDICO_REQUEST: `${CONSULTORIO}_ALTA_MEDICO_REQUEST`,\n  CONSULTORIO_ALTA_MEDICO_SUCCESS: `${CONSULTORIO}_ALTA_MEDICO_SUCCESS`,\n  CONSULTORIO_ALTA_MEDICO_ERROR: `${CONSULTORIO}_ALTA_MEDICO_ERROR`\n};\nexport const INITIAL_STATE = {\n  fetching: false\n};\nexport default ((state = INITIAL_STATE, action = {}) => {\n  switch (action.type) {\n    case types.CONSULTORIO_REQUEST:\n      return { ...state,\n        fetching: true\n      };\n\n    case types.CONSULTORIO_SUCCESS:\n      return { ...state,\n        fetching: false\n      };\n\n    case types.CONSULTORIO_ERROR:\n      return { ...state,\n        fetching: false\n      };\n\n    case types.CONSULTORIO_ALTA_MEDICO_REQUEST:\n      return { ...state,\n        fetching: true\n      };\n\n    case types.CONSULTORIO_ALTA_MEDICO_SUCCESS:\n      return { ...state,\n        fetching: false\n      };\n\n    case types.CONSULTORIO_ALTA_MEDICO_ERROR:\n      return { ...state,\n        fetching: false\n      };\n\n    default:\n      return state;\n  }\n});\nexport const actions = {\n  listconsultorioReq: setList => ({\n    type: types.CONSULTORIO_REQUEST,\n    setList\n  }),\n  listconsultorioSuccess: () => ({\n    type: types.CONSULTORIO_SUCCESS\n  }),\n  listconsultorioError: () => ({\n    type: types.CONSULTORIO_ERROR\n  }),\n  altaMedicoSendRequest: medico => ({\n    type: types.CONSULTORIO_ALTA_MEDICO_REQUEST,\n    medico\n  }),\n  altaMedicoSuccess: () => ({\n    type: types.CONSULTORIO_ALTA_MEDICO_SUCCESS\n  }),\n  altaMedicoError: () => ({\n    type: types.CONSULTORIO_ALTA_MEDICO_ERROR\n  })\n};\nexport const selectors = {\n  isFetching: ({\n    consultorio\n  }) => consultorio.consultorio.fetching\n};","map":{"version":3,"sources":["/home/ycali/dev/CONSULTORIO/web/src/app/redux/consultorioReducer.js"],"names":["CONSULTORIO","types","CONSULTORIO_REQUEST","CONSULTORIO_SUCCESS","CONSULTORIO_ERROR","CONSULTORIO_ALTA_MEDICO_REQUEST","CONSULTORIO_ALTA_MEDICO_SUCCESS","CONSULTORIO_ALTA_MEDICO_ERROR","INITIAL_STATE","fetching","state","action","type","actions","listconsultorioReq","setList","listconsultorioSuccess","listconsultorioError","altaMedicoSendRequest","medico","altaMedicoSuccess","altaMedicoError","selectors","isFetching","consultorio"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,yBAApB;AAEP,OAAO,MAAMC,KAAK,GAAG;AACjBC,EAAAA,mBAAmB,EAAG,GAAEF,WAAY,UADnB;AAEjBG,EAAAA,mBAAmB,EAAG,GAAEH,WAAY,UAFnB;AAGjBI,EAAAA,iBAAiB,EAAG,GAAEJ,WAAY,QAHjB;AAKjBK,EAAAA,+BAA+B,EAAG,GAAEL,WAAY,sBAL/B;AAMjBM,EAAAA,+BAA+B,EAAG,GAAEN,WAAY,sBAN/B;AAOjBO,EAAAA,6BAA6B,EAAG,GAAEP,WAAY;AAP7B,CAAd;AAUP,OAAO,MAAMQ,aAAa,GAAG;AACzBC,EAAAA,QAAQ,EAAE;AADe,CAAtB;AAGP,gBAAe,CAACC,KAAK,GAAGF,aAAT,EAAwBG,MAAM,GAAG,EAAjC,KAAwC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,KAAK,CAACC,mBAAX;AACI,aAAO,EACH,GAAGQ,KADA;AAEHD,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ,SAAKR,KAAK,CAACE,mBAAX;AACI,aAAO,EACH,GAAGO,KADA;AAEHD,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ,SAAKR,KAAK,CAACG,iBAAX;AACI,aAAO,EACH,GAAGM,KADA;AAEHD,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAKA,SAAKR,KAAK,CAACI,+BAAX;AACA,aAAO,EACH,GAAGK,KADA;AAEHD,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ,SAAKR,KAAK,CAACK,+BAAX;AACI,aAAO,EACH,GAAGI,KADA;AAEHD,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAIJ,SAAKR,KAAK,CAACM,6BAAX;AACI,aAAO,EACH,GAAGG,KADA;AAEHD,QAAAA,QAAQ,EAAE;AAFP,OAAP;;AAKJ;AACI,aAAOC,KAAP;AAlCR;AAoCH,CArCD;AAuCA,OAAO,MAAMG,OAAO,GAAG;AACnBC,EAAAA,kBAAkB,EAAGC,OAAD,KAAc;AAC9BH,IAAAA,IAAI,EAAEX,KAAK,CAACC,mBADkB;AAE9Ba,IAAAA;AAF8B,GAAd,CADD;AAKnBC,EAAAA,sBAAsB,EAAE,OAAO;AAC3BJ,IAAAA,IAAI,EAAEX,KAAK,CAACE;AADe,GAAP,CALL;AAQnBc,EAAAA,oBAAoB,EAAE,OAAO;AACzBL,IAAAA,IAAI,EAAEX,KAAK,CAACG;AADa,GAAP,CARH;AAYnBc,EAAAA,qBAAqB,EAAGC,MAAD,KAAa;AAChCP,IAAAA,IAAI,EAAEX,KAAK,CAACI,+BADoB;AAEhCc,IAAAA;AAFgC,GAAb,CAZJ;AAgBnBC,EAAAA,iBAAiB,EAAE,OAAO;AACtBR,IAAAA,IAAI,EAAEX,KAAK,CAACK;AADU,GAAP,CAhBA;AAmBnBe,EAAAA,eAAe,EAAE,OAAO;AACpBT,IAAAA,IAAI,EAAEX,KAAK,CAACM;AADQ,GAAP;AAnBE,CAAhB;AAwBP,OAAO,MAAMe,SAAS,GAAG;AACrBC,EAAAA,UAAU,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAqBA,WAAW,CAACA,WAAZ,CAAwBf;AADpC,CAAlB","sourcesContent":["export const CONSULTORIO = \"consultorio/CONSULTORIO\";\n\nexport const types = {\n    CONSULTORIO_REQUEST: `${CONSULTORIO}_REQUEST`,\n    CONSULTORIO_SUCCESS: `${CONSULTORIO}_SUCCESS`,\n    CONSULTORIO_ERROR: `${CONSULTORIO}_ERROR`,\n\n    CONSULTORIO_ALTA_MEDICO_REQUEST: `${CONSULTORIO}_ALTA_MEDICO_REQUEST`,\n    CONSULTORIO_ALTA_MEDICO_SUCCESS: `${CONSULTORIO}_ALTA_MEDICO_SUCCESS`,\n    CONSULTORIO_ALTA_MEDICO_ERROR: `${CONSULTORIO}_ALTA_MEDICO_ERROR`,\n};\n\nexport const INITIAL_STATE = {\n    fetching: false,\n};\nexport default (state = INITIAL_STATE, action = {}) => {\n    switch (action.type) {\n        case types.CONSULTORIO_REQUEST:\n            return {\n                ...state,\n                fetching: true,\n            };\n        case types.CONSULTORIO_SUCCESS:\n            return {\n                ...state,\n                fetching: false,\n            };\n        case types.CONSULTORIO_ERROR:\n            return {\n                ...state,\n                fetching: false,\n            };\n\n            case types.CONSULTORIO_ALTA_MEDICO_REQUEST:\n            return {\n                ...state,\n                fetching: true,\n            };\n        case types.CONSULTORIO_ALTA_MEDICO_SUCCESS:\n            return {\n                ...state,\n                fetching: false,\n            };\n        case types.CONSULTORIO_ALTA_MEDICO_ERROR:\n            return {\n                ...state,\n                fetching: false,\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport const actions = {\n    listconsultorioReq: (setList) => ({\n        type: types.CONSULTORIO_REQUEST,\n        setList,\n    }),\n    listconsultorioSuccess: () => ({\n        type: types.CONSULTORIO_SUCCESS,\n    }),\n    listconsultorioError: () => ({\n        type: types.CONSULTORIO_ERROR,\n    }),\n\n    altaMedicoSendRequest: (medico) => ({\n        type: types.CONSULTORIO_ALTA_MEDICO_REQUEST,\n        medico,\n    }),\n    altaMedicoSuccess: () => ({\n        type: types.CONSULTORIO_ALTA_MEDICO_SUCCESS,\n    }),\n    altaMedicoError: () => ({\n        type: types.CONSULTORIO_ALTA_MEDICO_ERROR,\n    }),\n};\n\nexport const selectors = {\n    isFetching: ({ consultorio }) => consultorio.consultorio.fetching,\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}